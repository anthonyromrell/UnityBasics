//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""KeyActionMap"",
            ""id"": ""7fc9300c-789c-4c7a-9922-601031d6794a"",
            ""actions"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""type"": ""Button"",
                    ""id"": ""d11f32d0-1c58-4468-803c-72b8cbaa2535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spacebar"",
                    ""type"": ""Button"",
                    ""id"": ""175f5096-80e2-4ef8-b5f4-731c70134f65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34b77066-7d05-428b-bf7f-24b57b07f2ca"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc8c022c-f781-4540-9801-a54ac382d7ab"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aeadbb45-c318-4f4e-b57d-25f0d79df18a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spacebar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyActionMap
        m_KeyActionMap = asset.FindActionMap("KeyActionMap", throwIfNotFound: true);
        m_KeyActionMap_ArrowKeys = m_KeyActionMap.FindAction("ArrowKeys", throwIfNotFound: true);
        m_KeyActionMap_Spacebar = m_KeyActionMap.FindAction("Spacebar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyActionMap
    private readonly InputActionMap m_KeyActionMap;
    private List<IKeyActionMapActions> m_KeyActionMapActionsCallbackInterfaces = new List<IKeyActionMapActions>();
    private readonly InputAction m_KeyActionMap_ArrowKeys;
    private readonly InputAction m_KeyActionMap_Spacebar;
    public struct KeyActionMapActions
    {
        private @InputControls m_Wrapper;
        public KeyActionMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ArrowKeys => m_Wrapper.m_KeyActionMap_ArrowKeys;
        public InputAction @Spacebar => m_Wrapper.m_KeyActionMap_Spacebar;
        public InputActionMap Get() { return m_Wrapper.m_KeyActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IKeyActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyActionMapActionsCallbackInterfaces.Add(instance);
            @ArrowKeys.started += instance.OnArrowKeys;
            @ArrowKeys.performed += instance.OnArrowKeys;
            @ArrowKeys.canceled += instance.OnArrowKeys;
            @Spacebar.started += instance.OnSpacebar;
            @Spacebar.performed += instance.OnSpacebar;
            @Spacebar.canceled += instance.OnSpacebar;
        }

        private void UnregisterCallbacks(IKeyActionMapActions instance)
        {
            @ArrowKeys.started -= instance.OnArrowKeys;
            @ArrowKeys.performed -= instance.OnArrowKeys;
            @ArrowKeys.canceled -= instance.OnArrowKeys;
            @Spacebar.started -= instance.OnSpacebar;
            @Spacebar.performed -= instance.OnSpacebar;
            @Spacebar.canceled -= instance.OnSpacebar;
        }

        public void RemoveCallbacks(IKeyActionMapActions instance)
        {
            if (m_Wrapper.m_KeyActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyActionMapActions @KeyActionMap => new KeyActionMapActions(this);
    public interface IKeyActionMapActions
    {
        void OnArrowKeys(InputAction.CallbackContext context);
        void OnSpacebar(InputAction.CallbackContext context);
    }
}
